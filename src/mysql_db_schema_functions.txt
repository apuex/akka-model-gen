.function db_output_keys(entity)
  keys = ""
  keys = keys + db_output_fk_pk(my.entity)
  out = db_output_fk_only(my.entity)
  if string.length(keys) > 0 & string.length(out) > 0
    keys = keys + ",\n  "
  endif
  keys = keys + out
  return keys
.endfunction

.function db_output_fk_pk(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  if defined(my.pk)
    for my.pk.field
      my.pkField = field
      if defined(extract_pk_field(my.entity, my.pkField.name))
        my.theField = extract_pk_field(my.entity, my.pkField.name)
        if defined(my.theField.joinKey)
          my.foreignKey =  my.entity->foreignKey(name = my.theField.joinKey)
          my.theRefField = model->entity(name = my.foreignKey.refEntity)->field(name = my.theField.refField)
          assign_field_type(my.theField, my.theRefField)
        endif
        if string.length(my.result) > 0
          my.result = my.result + ",\n  "
        endif
        my.result = my.result + "$(db_output_field_basic(my.theField))"
      else
        if has_fk(my.entity) & is_fk_field(my.entity, my.pkField.name)
          my.theField = extract_fk_field(my.entity, my.pkField.name)
          if string.length(my.result) > 0
            my.result = my.result + ",\n  "
          endif
          assign_field_type(field, my.theField)
          my.result = my.result + "$(db_output_field_basic(field))"
        else
          abort "E: no primaryKey/foreignKey is defined on entity $(my.entity.name)."
        endif
      endif
    endfor
  else
    abort "E: no primaryKey is defined on entity $(my.entity.name)."
  endif
  return my.result
.endfunction

.function db_output_fk_only(entity)
  my.result = ""
  for my.entity.foreignKey
    for foreignKey.field
      my.fkField = extract_fk_field(my.entity, field.name)
      if is_pk_field(my.entity, field.name)
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n  "
        endif
        assign_field_type(field, my.fkField)
        my.result = my.result + "$(db_output_field_basic(field))"
      endif
    endfor
  endfor
  return my.result
.endfunction

.function db_output_field_basic(field)
  if defined(my.field.required) & my.field.required = "true"
    nullOpt = " NOT NULL"
  else
    nullOpt = ""
  endif
  if defined(my.field.type) & my.field.type = "text"
    return my.field.name + " TEXT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "string"
    return my.field.name + " VARCHAR(" + my.field.length + ")" + nullOpt
  elsif defined(my.field.type) & my.field.type = "double"
    return my.field.name + " DOUBLE" + nullOpt
  elsif defined(my.field.type) & my.field.type = "int"
    return my.field.name + " INT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "long"
    return my.field.name + " BIGINT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "bool"
    return my.field.name + " TINYINT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "timestamp"
    return my.field.name + " DATETIME" + nullOpt
  elsif defined(my.field.type) & my.field.type = "array"
    return ""
  elsif defined(my.field.type) & my.field.type = "map"
    return ""
  elsif defined(my.field.type) & is_enum_type(my.field.type)
    return my.field.name + " INT" + nullOpt
  elsif defined(my.field.type)
    return ""
  else
    abort "E: no type is defined on field $(my.field.name)."
  endif
.endfunction

.function db_output_nonkey_field(entity, field)
  if is_fk_field(my.entity, my.field.name) | is_pk_field(my.entity, my.field.name)
    return ""
  elsif defined(my.field.joinKey)
    foreignKey =  my.entity->foreignKey(name = my.field.joinKey)
    theRefField = model->entity(name = foreignKey.refEntity)->field(name = my.field.refField)
    assign_field_type(my.field, theRefField)
    return db_output_field_basic(my.field)
  else
    return db_output_field_basic(my.field)
  endif
.endfunction
