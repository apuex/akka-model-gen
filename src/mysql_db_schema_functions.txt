.function db_output_keys(entity)
  keys = ""
  keys = keys + db_output_fk_pk(my.entity)
  out = db_output_fk_only(my.entity)
  if string.length(keys) > 0 & string.length(out) > 0
    keys = keys + ",\n  "
  endif
  keys = keys + out
  return keys
.endfunction

.function db_output_fk_pk(entity)
  result = ""
  pk = extract_pk(my.entity)
  if defined(pk)
    for pk.field
      pkField = field
      if exists_field(my.entity, pkField.name) & (defined(pkField.type) & is_element_type(pkField.type))
        abort "E: Not supposed to be like that."
      else
        if has_fk(my.entity) & is_fk_field(my.entity, pkField.name)
          theField = extract_fk_field(my.entity, pkField.name)
        else
          echo "skipped 1: \n $(my.entity.name) => $(pkField.name)"
          return result
        endif
      endif
      if string.length(result) > 0
        result = result + ",\n  "
      endif
      result = result + "$(db_output_field(my.entity, theField))"
      echo "$(my.entity.name) => $(result)"
    endfor
  else
    abort "E: no primaryKey is defined on entity $(my.entity.name)."
  endif
  return result
.endfunction

.function db_output_fk_only(entity)
  result = ""
  for my.entity.foreignKey
    for field
      fkField = extract_fk_field(my.entity, field.name)
      if exists_field(my.entity, fkField.name) & (defined(fkField.type) & is_element_type(fkField.type))
        abort "E: Not supposed to be like that."
      elsif is_pk_field(my.entity, field.name)
        # echo "skipped 2: \n  $(my.entity.name) => $(field.name) $(fkField.type)"
      else
        theField = extract_fk_field(my.entity, field.name)
        if string.length(result) > 0
          result = result + ",\n  "
        endif
        result = result + "$(db_output_field(my.entity, theField))"
      endif
    endfor
  endfor
  return result
.endfunction

.function db_output_field_basic(field)
  if defined(my.field.required) & my.field.required = "true"
    nullOpt = " NOT NULL"
  else
    nullOpt = ""
  endif
  if defined(my.field.type) & my.field.type = "string"
    return my.field.name + " VARCHAR(" + my.field.length + ")" + nullOpt
  elsif defined(my.field.type) & my.field.type = "double"
    return my.field.name + " DOUBLE" + nullOpt
  elsif defined(my.field.type) & my.field.type = "int"
    return my.field.name + " INT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "bigint"
    return my.field.name + " BIGINT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "bool"
    return my.field.name + " TINYINT" + nullOpt
  elsif defined(my.field.type) & my.field.type = "timestamp"
    return my.field.name + " DATETIME" + nullOpt
  elsif defined(my.field.type) & my.field.type = "array"
    return ""
  elsif defined(my.field.type) & my.field.type = "map"
    return ""
  elsif defined(my.field.type)
    return ""
  else
    abort "E: no type is defined on field $(my.field.name)."
  endif
.endfunction

.function db_output_field(entity, field)
  if defined(my.field.joinKey)
    foreignKey =  my.entity->foreignKey(name = my.field.joinKey)
    theRefField = model->entity(name = foreignKey.refEntity)->field(name = my.field.refField)
    my.field.type = theRefField.type
    if defined(theRefField.length)
      my.field.length = theRefField.length
    endif
    return db_output_field_basic(my.field)
  else
    return db_output_field_basic(my.field)
  endif
.endfunction
