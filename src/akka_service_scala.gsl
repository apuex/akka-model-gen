.template 1
.class_package = "$(model.package).service"
.pkgdir = "service/src/main/scala/$(string.replace(class_package, ".|/"))"
.directory.create(pkgdir)
.for entity
.if !(defined(entity.transient) & entity.transient = "true")
.output "$(pkgdir)/$(entity.name:Pascal)Service.scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import akka.actor._
import $(model.package).config._
import $(model.package).tx._
import $(model.package).message._
import javax.inject._

object $(entity.name:Pascal)Service {
  def props = Props[$(entity.name:Pascal)Service]
  def name: String = "$(entity.name:Pascal)Service"
}

.if defined(entity.aggregationRoot) & entity.aggregationRoot = "true"
.  actor_ref = "@Named(\"Sharding$(entity.name:Pascal)s\") $(entity.name:Camel): ActorRef, "
.else
.  actor_ref = ""
.endif
class $(entity.name:Pascal)Service @Inject() ($(actor_ref:no)$(entity.name:Camel)Tx: $(entity.name:Pascal)Tx$(tx_output_depended_tx_defs(entity, 0)))
  extends Actor with ActorLogging {

  override def receive: Receive = {
.if defined(entity.aggregationRoot) & entity.aggregationRoot = "true"
    case cmd: $(entity.name:Pascal)Command => $(entity.name:Camel) forward cmd
.elsif defined(entity.aggregationTo) & string.length(entity.aggregationTo) > 0
.else
    case Create$(entity.name:Pascal)Cmd(user, $(scala_output_field_name_list(entity, 0))) =>
      $(entity.name:Camel)Tx.createOrUpdate($(entity.name:Pascal)Vo($(scala_output_field_name_list(entity, 0))))
    case Update$(entity.name:Pascal)Cmd(user, $(scala_output_field_name_list(entity, 0))) =>
      $(entity.name:Camel)Tx.createOrUpdate($(entity.name:Pascal)Vo($(scala_output_field_name_list(entity, 0))))
    case Delete$(entity.name:Pascal)Cmd(user, $(scala_output_key_name_list(entity))) =>
      $(entity.name:Camel)Tx.deleteByPrimaryKey($(tx_output_key_as_value(entity, extract_pk(entity))))
    case Retrieve$(entity.name:Pascal)Cmd(user, $(scala_output_key_name_list(entity))) =>
      $(entity.name:Camel)Tx.selectByPrimaryKey($(tx_output_key_as_value(entity, extract_pk(entity))))
.endif
    case x => log.info("unhandled COMMAND: {} {}", this, x)
  }
}

.close
.endif
.endfor
.output "$(pkgdir)/Module.scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import com.google.inject.AbstractModule
import play.api.libs.concurrent.AkkaGuiceSupport

class Module extends AbstractModule with AkkaGuiceSupport {
  override def configure() = {
.for entity
.if !(defined(entity.transient) & entity.transient = "true")
    bindActor[$(entity.name:Pascal)Service]("$(entity.name:Pascal)Service")
.endif
.endfor
  }
}
.endtemplate


