.template 0

.function is_enum_type(type)
  if !is_element_type(my.type)
    if defined(model->entity(name = my.type))
      my.entity = model->entity(name = my.type)
      if defined(my.entity.enum) & my.entity.enum = "true"
        return 1
      endif
    endif
  endif
  return 0
.endfunction

.function is_element_type(type)
  if !defined(my.type)
    return 0
  endif
  if my.type = "text"
    return 1
  elsif my.type = "string"
    return 1
  elsif my.type = "double"
    return 1
  elsif my.type = "int"
    return 1
  elsif my.type = "bigint"
    return 1
  elsif my.type = "bool"
    return 1
  elsif my.type = "timestamp"
    return 1
  else
    return 0
  endif
.endfunction

.function extract_pk(entity)
  for my.entity.primaryKey
    return primaryKey
  endfor
.endfunction

.function is_pk_field(entity, fieldName)
  for my.entity.primaryKey
    for field
      if field.name = my.fieldName
        return 1
      endif
    endfor
  endfor
  return 0
.endfunction

.function has_fk(entity)
  for my.entity.foreignKey
    return 1
  endfor
  return 0
.endfunction

.function assign_field_type(field, refField)
  my.field.type = my.refField.type
  if defined(my.refField.length)
    my.field.length = my.refField.length
  endif
.endfunction

.function is_fk_field(entity, fieldName)
  for my.entity.foreignKey
    for field
      if field.name = my.fieldName
        return 1
      endif
    endfor
  endfor
  return 0
.endfunction

.function extract_pk_field(entity, fieldName)
  for my.entity.field
    if field.name = my.fieldName
      return field
    endif
  endfor
.endfunction

.function extract_fk_field(entity, fieldName)
  for my.entity.foreignKey
    for foreignKey.field
      fkField = field
      if field.name = my.fieldName
        ref = model->entity(name = foreignKey.refEntity)
        if defined(ref->field(name = fkField.refField))
          assign_field_type(field, ref->field(name = fkField.refField))
        else
          assign_field_type(field, extract_fk_field(ref, field.refField))
        endif
        return field
      endif
    endfor
  endfor
  abort "E: no foreignKey field with name $(field.name) is defined on entity $(my.entity.name)."
.endfunction

.function exists_field(entity, fieldName)
  for my.entity.field
    if field.name = my.fieldName
      return 1
    endif
  endfor
  return 0
.endfunction

. function find_entity_by_type(type)
  for model.entity
    if entity.name = my.type
      return entity
    else
      for entity.aggregation
        if aggregation.name = my.type
          return aggregation
        endif
      endfor
    endif
  endfor
.endfunction

.function get_field(entity_name, field_name)
  my.entity = find_entity_by_type(my.entity_name)
  if exists_field(my.entity, my.field_name)
    my.field = my.entity->field(name = my.field_name)
  elsif defined(extract_fk_field(my.entity, my.field_name))
    my.field = extract_fk_field(my.entity, my.field_name)
  elsif defined(my.entity.aggregationTo)
    my.aggregationTo = find_entity_by_type(my.entity.aggregationTo)
    my.field = my.aggregationTo->field(name = my.field_name)
  endif
  return my.field
.endfunction

.function is_required(field)
  if defined(my.field.required) & my.field.required = "true"
    return 1
  else
    return 0
  endif
.endfunction

include "mysql_db_schema_functions.txt"
include "mysql_db_schema.gsl"

include "scala_pb_functions.txt"
include "scala_pb.gsl"

include "play_json_functions.txt"
include "play_json.gsl"
include "play_controller_functions.txt"
include "play_controller.gsl"
include "play_router.gsl"
include "play_router_conf.gsl"

include "akka_actor_scala_functions.txt"
include "play_jdbc_dao_mysql_functions.txt"
include "play_jdbc_tx_functions.txt"
include "akka_actor_scala.gsl"
include "akka_shard_actor_scala.gsl"
include "akka_cluster_shard_actor_scala.gsl"

include "play_jdbc_dao_mysql.gsl"
include "play_jdbc_tx.gsl"
include "js_static.gsl"
include "js_api_url.gsl"

.endtemplate

