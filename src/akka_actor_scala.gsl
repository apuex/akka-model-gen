.template 1
.class_package = "$(model.package).domain"
.pkgdir = "domain/src/main/scala/$(string.replace(class_package, ".|/"))"
.directory.create(pkgdir)
.for entity
.aggRoot = ""
.if (defined(entity.aggregationRoot) & entity.aggregationRoot = "true") & !(defined(entity.generate) & entity.generate = "false")
.  pk = extract_pk(entity)
.  aggRoot = entity.name
.
.output "$(pkgdir)/$(entity.name:Pascal).scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import $(model.package).tx._
import $(model.package).message._
import $(model.package).message.ResponseType._
import com.google.protobuf.timestamp.Timestamp
import akka.actor._
import akka.event._
import akka.pattern._
import akka.persistence._
import akka.persistence.journal.Tagged
import akka.util._
import akka.util.Timeout._

import javax.inject._

import scala.collection.convert.ImplicitConversions._
import scala.concurrent.ExecutionContext
import scala.concurrent.duration._
import scala.util._

object $(entity.name:Pascal) {
  def props = Props[$(entity.name:Pascal)]
}

class $(entity.name:Pascal)($(entity.name:Camel)Tx: $(entity.name:Pascal)Tx$(tx_output_depended_tx_defs(entity, 0))$(actor_output_depended_actor_ref_defs(entity, 0))) extends PersistentActor with ActorLogging {
  override def persistenceId: String = s"${self.path.name}"
  implicit def requestTimeout: Timeout = FiniteDuration(20, SECONDS)
  implicit def executionContext: ExecutionContext = context.dispatcher
  val tag = Set(context.system.name)

  $(scala_output_define_fields(entity))

  override def receiveRecover: Receive = {
    case SnapshotOffer(_, x: $(entity.name:Pascal)Vo) =>
      $(scala_output_set_pk_values(entity, 'x.'))
      $(scala_output_set_field_values(entity, 'x.'))
    case x: RecoveryCompleted =>
    case x =>
      updateStateWithTag(x)
  }

  override def receiveCommand: Receive = {
    case cmd: Create$(entity.name:Pascal)Cmd =>
      if(isValid()) {
        sender() ! ResponseVo(ALREADY_EXISTS, Some("$(entity.name:Pascal) already exists."))
      } else {
        persistWithTag(Create$(entity.name:Pascal)Evt(cmd.userId, $(scala_output_field_name_list(entity, 0, 'cmd.'))))
      }
    case cmd: Update$(entity.name:Pascal)Cmd =>
      if(!isValid()) {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      } else {
        persistWithTag(Update$(entity.name:Pascal)Evt(cmd.userId, $(scala_output_field_name_list(entity, 0, 'cmd.'))))
      }
    case cmd: Delete$(entity.name:Pascal)Cmd =>
      if(!isValid()) {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      } else {
        persistWithTag(Delete$(entity.name:Pascal)Evt(cmd.userId, $(scala_output_key_name_list(entity, 'cmd.'))))
      }
    case _: Retrieve$(entity.name:Pascal)Cmd =>
      if (!isValid()) {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      } else {
        sender() ! $(entity.name:Pascal)Vo($(scala_output_field_name_list(entity, 0, 'this.')))
      }
.  for field
.    theField = field
.    if (field.type = "array" | field.type = "map") & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")
    case cmd: Add$(field.name:Pascal)Cmd =>
      if (isValid()) {
        persistWithTag(Add$(field.name:Pascal)Evt(cmd.userId, $(scala_output_key_name_list(entity, 'cmd.')), $(scala_output_field_name(field, 'cmd.'))))
      } else {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      }
    case cmd: Remove$(field.name:Pascal)Cmd =>
      if (isValid()) {
        persistWithTag(Remove$(field.name:Pascal)Evt(cmd.userId, $(scala_output_key_name_list(entity, 'cmd.')), $(scala_output_field_name(field, 'cmd.'))))
      } else {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      }
.    elsif !defined(pk->field(name = theField.name)) & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")
    case cmd: Change$(field.name:Pascal)Cmd =>
      if (isValid()) {
        persistWithTag(Change$(field.name:Pascal)Evt(cmd.userId, $(scala_output_key_name_list(entity, 'cmd.')), $(scala_output_field_name(field, 'cmd.'))))
      } else {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      }
.    else
.    endif
.  endfor
.for aggregation
    case cmd: Update$(aggregation.name:Pascal)Cmd =>
      $(scala_output_set_field_values(aggregation, 'cmd.'))
    case cmd: Get$(aggregation.name:Pascal)Cmd =>
      if (isValid()) {
        sender() ! $(aggregation.name:Pascal)Vo($(scala_output_key_name_list(entity, 'cmd.')), $(scala_output_field_name_list(aggregation, 0, 'this.')))
      } else {
        sender() ! ResponseVo(NOT_EXIST, Some("$(entity.name:Pascal) not exists."))
      }
.endfor
.
.for message
.  extra_fields = scala_output_field_name_list(message, 1, 'cmd.')
.  if string.length(extra_fields) > 0
.    extra_fields = ", " + extra_fields
.  endif
    case cmd: $(message.name:Pascal)Cmd =>
      // TODO: Un-implemented.
.  if !(defined(message.transient) & transient = "true")
      persistWithTag($(message.name:Pascal)Evt(cmd.userId, $(scala_output_key_name_list(entity, 'cmd.'))$(extra_fields:no)))
.  endif
.  if defined(message->request)
.    request = message->request
      // TODO: implement send request.
.    if defined(request.[to])
.      to_entity = find_entity_by_type(request.[to])
     // $(request.[to]:Camel)Shard ! $(request.message:Pascal)Cmd(cmd.userId, $(scala_output_key_name_list(to_entity, 'cmd.')))
.    endif
.  endif
.  if defined(message->response)
.    response = message->response
    case x: $(response.message:Pascal)Vo =>
      // TODO: implement process response.
.  endif
.endfor
  }

  private def persistWithTag(e: Any): Unit = persist(Tagged(e, tag))(updateStateWithTag)

  private def updateStateWithTag: (Any => Unit) = {
    case Tagged(e, _) =>
      updateState(e)
    case e =>
      updateState(e)
  }

  private def updateState: (Any => Unit) = {
    case evt: Create$(entity.name:Pascal)Evt =>
      $(scala_output_set_pk_values(entity, 'evt.'))
      $(scala_output_set_field_values(entity, 'evt.'))
      $(entity.name:Camel)Tx.createOrUpdate($(entity.name:Pascal)Vo($(scala_output_field_name_list(entity, 0, 'evt.'))))
      replyToSender(ResponseVo(SUCCESS, Some("$(entity.name:Pascal) created.")))
    case evt: Update$(entity.name:Pascal)Evt =>
      $(scala_output_set_field_values(entity, 'evt.'))
      $(entity.name:Camel)Tx.createOrUpdate($(entity.name:Pascal)Vo($(scala_output_field_name_list(entity, 0, 'evt.'))))
      replyToSender(ResponseVo(SUCCESS, Some("$(entity.name:Pascal) updated.")))
    case evt: Delete$(entity.name:Pascal)Evt =>
      $(entity.name:Camel)Tx.deleteByPrimaryKey($(tx_output_key_as_value(entity, extract_pk(entity), 'evt.')))
      replyToSender(ResponseVo(SUCCESS, Some("$(entity.name:Pascal) deleted.")))
.  for field
.    theField = field
.    if (field.type = "array" | field.type = "map") & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")
    case evt: Add$(field.name:Pascal)Evt =>
      $(scala_output_add_field_value(field, 'evt.'))
      $(entity.name:Camel)Tx.add$(field.name:Pascal)($(scala_output_key_name_list(entity, 'evt.')), $(scala_output_field_name(field, 'evt.')))
      replyToSender(ResponseVo(SUCCESS, Some("$(field.name:Pascal) added.")))
    case evt: Remove$(field.name:Pascal)Evt =>
      $(scala_output_remove_field_value(field, 'evt.'))
      $(entity.name:Camel)Tx.remove$(field.name:Pascal)($(scala_output_key_name_list(entity, 'evt.')), $(scala_output_field_name(field, 'evt.')))
      replyToSender(ResponseVo(SUCCESS, Some("$(field.name:Pascal) removed.")))
.    elsif !defined(pk->field(name = theField.name)) & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")
    case evt: Change$(field.name:Pascal)Evt =>
      $(scala_output_set_field_value(field, 'evt.'))
      $(entity.name:Camel)Tx.change$(field.name:Pascal)($(scala_output_key_name_list(entity, 'evt.')), $(scala_output_field_name(field, 'evt.')))
      replyToSender(ResponseVo(SUCCESS, Some("Change $(field.name:Pascal) accepted.")))
.    else
.    endif
.  endfor
.
.  for message
.    if !(defined(transient) & transient = "true")
.      field_names = scala_output_field_name_list(message, 1, 'evt.')
.      if string.length(field_names) > 0
.        field_names = ", " + field_names
.      endif
    case evt: $(message.name:Pascal)Evt =>
      // TODO: Un-implemented.
      replyToSender(ResponseVo(SUCCESS, Some("$(message.name:Pascal)Evt accepted.")))
.    endif
.  endfor
  }

  private def isValid(): Boolean = {
.  if entity.name = "alarm_record"
    alarmName.isDefined
.  else
    $(entity.name:Camel)Name.isDefined
.endif
  }

  private def replyToSender(msg: Any) = {
    if ("deadLetters" != sender().path.name) sender() ! msg
  }
}

.close
.endif
.endfor

.endtemplate


