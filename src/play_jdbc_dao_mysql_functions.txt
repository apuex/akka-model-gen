.function dao_output_depended_dao_defs(entity, first)
  my.result = ""
  my.daos = XML.new("dao")
  for my.entity.field
    if !(field.type = "any") \
      & !(defined(field.valueType) & field.valueType = "any") \
      & !is_element_type(field.type) \
      & !(defined(field.transient) & field.transient = "true")

      if defined(field->query)
        if !defined(my.daos.$(field->query.entity))
          my.daos.$(field->query.entity) = field->query.entity
          if string.length(my.result) > 0
            my.result = my.result + ", "
          endif
          my.result = my.result + "$(field->query.entity:Camel)DAO: $(field->query.entity:Pascal)DAO"
        else
        endif
      elsif !(field.type = my.entity.name) \
          & !(defined(field.entity) & field.entity = my.entity.name) \
          & !(defined(field.valueType) & field.valueType = my.entity.name)
        if string.length(my.result) > 0
          my.result = my.result + ", "
        endif
        if type = "array"

          if defined(field.entity) & defined(field.valueField)
            my.result = my.result + "$(field.entity:Camel)DAO: $(field.entity:Pascal)DAO"
          else
            my.result = my.result + "$(field.valueType:Camel)DAO: $(field.valueType:Pascal)DAO"
          endif
        elsif type = "map"
          my.result = my.result + "$(field.entity:Camel)DAO: $(field.entity:Pascal)DAO"
        else
          my.result = my.result + "$(field.type:Camel)DAO: $(field.type:Pascal)DAO"
        endif
      endif
   endif
  endfor
  if defined(my.entity.extendsEntity) & !defined(my.daos.$(my.entity.extendsEntity))
    my.daos.$(my.entity.extendsEntity) = my.entity.extendsEntity
    if string.length(my.result) > 0
      my.result = "$(my.entity.extendsEntity:Camel)DAO: $(my.entity.extendsEntity:Pascal)DAO, " + my.result
    else
      my.result = "$(my.entity.extendsEntity:Camel)DAO: $(my.entity.extendsEntity:Pascal)DAO"
    endif
  endif
  if my.first
    return my.result
  elsif string.length(my.result) > 0
    return ", "+ my.result
  else
    return my.result
  endif
.endfunction

.function dao_output_depended_daos(entity, first)
  my.result = ""
  my.daos = XML.new("dao")
  for my.entity.field
    if !(field.type = "any") \
      & !(defined(field.valueType) & field.valueType = "any") \
      & !is_element_type(field.type) \
      & !(defined(field.transient) & field.transient = "true")

      if defined(field->query)
        if !defined(my.daos.$(field->query.entity))
          my.daos.$(field->query.entity) = field->query.entity
          if string.length(my.result) > 0
            my.result = my.result + ", "
          endif
          my.result = my.result + "$(field->query.entity:Camel)DAO"
        else
        endif
      elsif !(field.type = my.entity.name) \
          & !(defined(field.entity) & field.entity = my.entity.name) \
          & !(defined(field.valueType) & field.valueType = my.entity.name)
        if string.length(my.result) > 0
          my.result = my.result + ", "
        endif
        if type = "array"
          if defined(field.entity) & defined(field.valueField)
            my.result = my.result + "$(field.entity:Camel)DAO"
          else
            my.result = my.result + "$(field.valueType:Camel)DAO"
          endif
        elsif type = "map"
          my.result = my.result + "$(field.entity:Camel)DAO"
        else
          my.result = my.result + "$(field.type:Camel)DAO"
        endif
      endif
   endif
  endfor
  if my.first
    return my.result
  elsif string.length(my.result) > 0
    return ", "+ my.result
  else
    return my.result
  endif
.endfunction

.function dao_output_result_parser(entity)
  my.result = "{\n"
  my.result = my.result + "    $(dao_output_parser_gets(my.entity))"
  my.result = my.result + " map {\n"
  my.result = my.result + "      case $(dao_output_parser_case_pattern(my.entity)) =>\n"
  my.result = my.result + "        $(my.entity.name:Pascal)Vo($(dao_output_parser_construct_pattern(my.entity)))\n"
  my.result = my.result + "    }\n  }"
  return my.result
.endfunction

.function dao_get_type(typeName)
  if my.typeName = "bool"
    return "Boolean"
  elsif my.typeName = "int" | my.typeName = "long" | my.typeName = "double" | my.typeName = "string" | my.typeName = "any" | my.typeName = "actor_ref"
    return "$(my.typeName:Pascal)"
  elsif my.typeName = "text"
    return "String"
  elsif my.typeName = "timestamp"
    return "Date"
  elsif my.typeName = "array"
    return "Seq"
  elsif my.typeName = "map"
    return "Map"
  else
    ref = find_entity_by_type(my.typeName)
    if defined(ref.enum) & ref.enum = "true"
      return "$(my.typeName:Pascal)"
    else
      return "$(my.typeName:Pascal)Vo"
    endif
  endif
.endfunction

.function dao_output_parser_extended_gets(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
    for my.extended.field
      if exists_reference(my.entity, my.fk.name, field.name)
        #my.extendedField = find_reference(my.entity, my.fk.name, field.name)
        #my.result = my.result + "$(my.extendedField.name:c)"
      else
        if string.length(my.result) > 0
          my.result = my.result + " ~\n    "
        endif
        if is_element_type(field.type)
          if defined(field.required) & required = "true"
            my.result = my.result + "get[$(dao_get_type(field.type))](\"$(field.name:c)\")"
          else
            my.result = my.result + "get[Option[$(dao_get_type(field.type))]](\"$(field.name:c)\")"
          endif
        else
          if defined(field.required) & required = "true"
            my.result = my.result + "get[Int](\"$(field.name:c)\")"
          else
            my.result = my.result + "get[Option[Int]](\"$(field.name:c)\")"
          endif
        endif
      endif
    endfor
  else
  endif
  return my.result
.endfunction

.function dao_output_parser_gets(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      my.fieldName = field.name
      my.field = ""
      if defined(my.entity->field(name = my.fieldName))
        my.field = my.entity->field(name = my.fieldName)
      else
        my.field = extract_fk_field(my.entity, my.fieldName)
      endif
      if string.length(my.result) > 0
        my.result = my.result + " ~\n    "
      endif
      if is_element_type(field.type)
        my.result = my.result + "get[$(dao_get_type(field.type))](\"$(field.name:c)\")"
      else
        my.result = my.result + "get[Int](\"$(field.name:c)\")"
      endif
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + " ~\n    "
      endif
      if is_element_type(field.type)
        if defined(field.required) & required = "true"
          my.result = my.result + "get[$(dao_get_type(field.type))](\"$(field.name:c)\")"
        else
          my.result = my.result + "get[Option[$(dao_get_type(field.type))]](\"$(field.name:c)\")"
        endif
      else
        if defined(field.required) & required = "true"
          my.result = my.result + "get[Int](\"$(field.name:c)\")"
        else
          my.result = my.result + "get[Option[Int]](\"$(field.name:c)\")"
        endif
      endif
    endif
  endfor
  my.extended = dao_output_parser_extended_gets(my.entity)
  if string.length(my.extended) > 0
    my.result = my.result + " ~\n    "
    my.result = my.result + my.extended
  endif
  return my.result
.endfunction

.function dao_output_parser_case_pattern_extended(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
    for my.extended.field
      if exists_reference(my.entity, my.fk.name, field.name)
      else
        if string.length(my.result) > 0
          my.result = my.result + " ~ "
        endif
        my.result = my.result + "$(field.name:Camel)"
      endif
    endfor
  else
  endif
  return my.result
.endfunction

.function dao_output_parser_case_pattern(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      if string.length(my.result) > 0
        my.result = my.result + " ~ "
      endif
      my.result = my.result + "$(field.name:Camel)"
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (!defined(field.transient) | !(transient = "true"))
      if is_element_type(field.type) | is_enum_type(field.type)
        if string.length(my.result) > 0
          my.result = my.result + " ~ "
        endif
        my.result = my.result + "$(field.name:Camel)"
      else
      endif
    endif
  endfor
  my.extended = dao_output_parser_case_pattern_extended(my.entity)
  if string.length(my.extended) > 0
    my.result = my.result + " ~ "
    my.result = my.result + my.extended
  endif
  return my.result
.endfunction

.function dao_output_parser_construct_pattern_extended(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
    for my.extended.field
      if exists_reference(my.entity, my.fk.name, field.name)
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n          "
        endif
        if field.type = "timestamp"
          my.result = my.result + "toTimestamp($(field.name:Camel))"
        elsif is_element_type(field.type)
          my.result = my.result + "$(field.name:Camel)"
        elsif is_enum_type(field.type)
          if(defined(field.required) & field.required = "true")
            my.result = my.result + "$(field.type:Pascal).fromValue($(field.name:Camel))"
          else
            my.result = my.result + "$(field.name:Camel).map(x => $(field.type:Pascal).fromValue(x))"
          endif
        elsif field.type = "array"
          if defined(field->query)
            my.the_query = field->query
            my.ref_entity = model->entity(name = my.the_query.entity)
            my.ref_query = dao_find_query(my.ref_entity, my.the_query.refName)
            my.result = my.result + "$(output_call_defined_query(my.entity, my.the_query, my.ref_entity, my.ref_query))"
          else
            if defined(field.entity) & defined(field.valueField)
              my.result = my.result + "$(field.entity:Camel)DAO.select$(field.valueField:Pascal)sBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
            else
              my.result = my.result + "$(field.valueType:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
            endif
          endif
        elsif field.type = "map"
          if defined(field.query)
          else
            my.result_set = "$(field.entity:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
            my.result = my.result + "$(dao_convert_result_set_to_map(field, my.result_set))"
          endif
        else
          my.result = my.result + "$(field.type:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
        endif
      endif
    endfor
  else
  endif
  return my.result
.endfunction

.function dao_output_parser_construct_pattern(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      if string.length(my.result) > 0
        my.result = my.result + ",\n          "
      endif
      if field.type = "timestamp"
        my.result = my.result + "toTimestamp($(field.name:Camel))"
      elsif is_enum_type(field.type)
        my.result = my.result + "$(field.type:Pascal).fromValue($(field.name:Camel))"
      else
        my.result = my.result + "$(field.name:Camel)"
      endif
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (!defined(field.transient) | !(transient = "true"))
      if string.length(my.result) > 0
        my.result = my.result + ",\n          "
      endif
      if field.type = "timestamp"
        my.result = my.result + "toTimestamp($(field.name:Camel))"
      elsif is_element_type(field.type)
        my.result = my.result + "$(field.name:Camel)"
      elsif is_enum_type(field.type)
        if(defined(field.required) & field.required = "true")
          my.result = my.result + "$(field.type:Pascal).fromValue($(field.name:Camel))"
        else
          my.result = my.result + "$(field.name:Camel).map(x => $(field.type:Pascal).fromValue(x))"
        endif
      elsif field.type = "array"
        if defined(field->query)
          my.the_query = field->query
          my.ref_entity = model->entity(name = my.the_query.entity)
          my.ref_query = dao_find_query(my.ref_entity, my.the_query.refName)
          my.result = my.result + "$(output_call_defined_query(my.entity, my.the_query, my.ref_entity, my.ref_query))"
        else
          if defined(field.entity) & defined(field.valueField)
            my.result = my.result + "$(field.entity:Camel)DAO.select$(field.valueField:Pascal)sBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
          else
            my.result = my.result + "$(field.valueType:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
          endif
        endif
      elsif field.type = "map"
        if defined(field.query)
        else
          my.result_set = "$(field.entity:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
          my.result = my.result + "$(dao_convert_result_set_to_map(field, my.result_set))"
        endif
      else
        my.result = my.result + "$(field.type:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
      endif
    endif
  endfor
  my.extended = dao_output_parser_construct_pattern_extended(my.entity)
  if string.length(my.extended) > 0
    my.result = my.result + ",\n          "
    my.result = my.result + my.extended
  endif
  return my.result
.endfunction

.function dao_convert_result_set_to_map(field, result_set)
  my.result = "{"
  my.result = my.result + "\n            var result: Map[$(scala_output_type(get_field(my.field.entity, my.field.keyField))), $(scala_output_type(get_field(my.field.entity, my.field.valueField)))] = Map()"
  my.result = my.result + "\n            $(my.result_set:no)"
  my.result = my.result + "\n              .foreach(x => result += (x.$(my.field.keyField:Camel) -> x.$(my.field.valueField:Camel)))"
  my.result = my.result + "\n            result"
  my.result = my.result + "\n          }"
  return my.result
.endfunction

.function dao_output_key_as_var_name(key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + "_"
    endif
    my.result = my.result + field.name
  endfor
  return "$(my.result:Pascal)"
.endfunction

.function dao_output_key_as_param_def(entity, key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + ", "
    endif
    if is_pk_field(my.entity, field.name)
      if defined(extract_pk_field(my.entity, field.name))
        my.theField = extract_pk_field(my.entity, field.name)
        if defined(my.theField.joinKey)
          my.foreignKey =  my.entity->foreignKey(name = my.theField.joinKey)
          my.theRefField = model->entity(name = my.foreignKey.refEntity)->field(name = my.theField.refField)
          assign_field_type(my.theField, my.theRefField)
        endif
        my.result = my.result + "$(my.theField.name:Camel): $(scala_output_type(my.theField))"
      else
        my.pk_field = extract_fk_field(my.entity, field.name)
        my.result = my.result + "$(field.name:Camel): $(scala_output_type(my.pk_field))"
      endif
    elsif is_fk_field(my.entity, field.name)
      if exists_field(my.entity, field.name)
        my.fk_field = get_field(my.entity.name, field.name)
        my.result = my.result + "$(my.fk_field.name:Camel): $(scala_output_type(my.fk_field))"
      else
        my.fk_field = extract_fk_field(my.entity, field.name)
        assign_field_type(field, my.fk_field)
        my.result = my.result + "$(field.name:Camel): $(scala_output_type(field))"
      endif
    else
    endif
  endfor
  return my.result
.endfunction

.function dao_output_entity_as_param_def(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    my.result = my.result + dao_output_key_as_param_def(my.entity, my.pk)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + ",\n      "
      endif
      my.result = my.result + "$(field.name:Camel): $(scala_output_type(field))"
    endif
  endfor
  return my.result
.endfunction

.function find_pk_or_aggregated_pk(type)
  for model.entity
    if entity.name = my.type
      return extract_pk(entity)
    else
      for entity.aggregation
        if aggregation.name = my.type
          return extract_pk(entity)
        endif
      endfor
    endif
  endfor
.endfunction

.function dao_output_extended_fields(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
    for my.extended.field
      if exists_reference(my.entity, my.fk.name, field.name)
        my.extendedField = find_reference(my.entity, my.fk.name, field.name)
        if !is_pk_field(my.entity, my.extendedField.name)
          if string.length(my.result) > 0
            my.result = my.result + ",\n        "
          endif
          my.result = my.result + "$(my.entity.extendsEntity).$(field.name:c) as $(my.extendedField.name:c)"
        endif
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n        "
        endif
        my.result = my.result + "$(my.entity.extendsEntity).$(field.name:c)"
      endif
    endfor
  else
  endif
  return my.result
.endfunction

.function dao_output_entity_fields(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  for my.pk.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n        "
    endif
    my.result = my.result + "$(my.entity.name).$(field.name:c)"
  endfor

  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if defined(my.entity.extendsEntity) & defined(field.joinKey) & field.joinKey = my.fk.name
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n        "
        endif
        my.result = my.result + "$(my.entity.name).$(field.name:c)"
      endif
    endif
  endfor
  return my.result
.endfunction

.function dao_output_entity_insert_placeholders(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  for my.pk.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n        "
    endif
    my.result = my.result + "{$(field.name:Camel)}"
  endfor

  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if defined(my.entity.extendsEntity) & defined(field.joinKey) & field.joinKey = my.fk.name
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n        "
        endif
        my.result = my.result + "{$(field.name:Camel)}"
      endif
    endif
  endfor
  return my.result
.endfunction

.function dao_output_entity_update_placeholders(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if defined(my.entity.extendsEntity) & defined(field.joinKey) & field.joinKey = my.fk.name
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n        "
        endif
        my.result = my.result + "$(field.name:c)={$(field.name:Camel)}"
      endif
    endif
  endfor
  return my.result
.endfunction

.function dao_output_where_by_key(key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + "\n        AND "
    endif
    my.result = my.result + "$(field.name:c) = {$(field.name:Camel)}"
  endfor
  return my.result
.endfunction

.function dao_output_where_by_extended_key(entity, key)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + "\n        AND "
    endif
    if defined(extract_pk_field(my.entity, field.name))
      my.pk_field = extract_pk_field(my.entity, field.name)
      if defined(my.entity.extendsEntity) & defined(my.pk_field.joinKey) & my.pk_field.joinKey = my.fk.name
        my.result = my.result + "$(my.pk_field.refField:c) = {$(field.name:Camel)}"
      endif
    else
      my.result = my.result + "$(field.name:c) = {$(field.name:Camel)}"
    endif
  endfor
  return my.result
.endfunction

.function dao_output_join_extends_entity(entity)
  my.joinColumns = ""
  my.result = "INNER JOIN $(model.dbSchema:c).$(my.entity.extendsEntity) ON ("
  my.extendedEntity = find_entity_by_type(my.entity.extendsEntity)
  my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
  for my.fk.field
    if exists_reference(my.entity, my.fk.name, field.refField)
      if string.length(my.joinColumns) > 0
        my.joinColumns = my.joinColumns + " AND "
      endif
      my.extendedField = find_reference(my.entity, my.fk.name, field.refField)
      my.joinColumns = my.joinColumns + "$(my.entity.name).$(my.extendedField.name:c) = $(my.entity.extendsEntity).$(my.extendedField.refField:c)"
    endif
  endfor
  my.result = my.result + my.joinColumns + ")"
  return my.result
.endfunction

.function dao_output_select_sql(entity)
  my.result = "SELECT"
  my.result = my.result + "\n        $(dao_output_entity_fields(my.entity))"
  my.extended = dao_output_extended_fields(my.entity)
  if string.length(my.extended) > 0
    my.result = my.result + ",\n        "
    my.result = my.result + my.extended
  endif
  my.result = my.result + "\n    FROM $(model.dbSchema:c).$(my.entity.name)"
  if defined(my.entity.extendsEntity)
    my.result = my.result + "\n      $(dao_output_join_extends_entity(my.entity))"
  endif
  return my.result
.endfunction

.function dao_output_select_by_key_sql(entity, key)
  my.result = "${sql}"
  my.result = my.result + "\n      WHERE $(dao_output_where_by_key(my.key))"
  return "SQL(s\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_key_as_param(entity, key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    endif
    my.field_name = field.name
    if !defined(my.entity->field(name = my.field_name))
      my.ref_field = extract_fk_field(my.entity, my.field_name)
      assign_field_type(field, my.ref_field)
      my.result = my.result + dao_output_field_as_equals_param(field)
    else
      my.result = my.result + dao_output_field_as_equals_param(my.entity->field(name = my.field_name))
    endif
  endfor
  return my.result
.endfunction

.function dao_output_field_as_equals_param(field)
  if is_enum_type(my.field.type)
    return "\"$(my.field.name:Camel)\" -> toValue($(my.field.name:Camel))"
  elsif my.field.type = "timestamp"
    return "\"$(my.field.name:Camel)\" -> toDate($(my.field.name:Camel))"
  else
    return "\"$(my.field.name:Camel)\" -> $(my.field.name:Camel)"
  endif
.endfunction

.function dao_output_entity_key_as_param(entity, key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    endif
    my.field_name = field.name
    if !defined(my.entity->field(name = my.field_name))
      my.ref_field = extract_fk_field(my.entity, my.field_name)
      assign_field_type(field, my.ref_field)
    endif
    my.result = my.result + dao_output_entity_field_as_param(my.entity, field)
  endfor
  return my.result
.endfunction

.function dao_output_entity_field_as_param(entity, field)
  if is_enum_type(my.field.type)
    return "\"$(my.field.name:Camel)\" -> toValue($(my.entity.name:Camel).$(my.field.name:Camel))"
  elsif my.field.type = "timestamp"
    return "\"$(my.field.name:Camel)\" -> toDate($(my.entity.name:Camel).$(my.field.name:Camel))"
  else
    return "\"$(my.field.name:Camel)\" -> $(my.entity.name:Camel).$(my.field.name:Camel)"
  endif
.endfunction

.function dao_output_entity_as_param(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    my.result = my.result + dao_output_entity_key_as_param(my.entity, my.pk)
  endif

  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if defined(my.entity.extendsEntity) & defined(field.joinKey) & field.joinKey = my.fk.name
      else
        if string.length(my.result) > 0
          my.result = my.result + ",\n      "
        endif
        my.result = my.result + "$(dao_output_entity_field_as_param(my.entity, field))"
      endif
    endif
  endfor
  return my.result
.endfunction

.function dao_output_select_by_key_single(entity, key)
  my.result = "{"
  my.result = my.result + "\n    $(dao_output_select_by_key_sql(my.entity, my.key)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + "\n    ).as(rowParser.single)"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_select_by_key(entity, key)
  my.result = "{"
  my.result = my.result + "\n    $(dao_output_select_by_key_sql(my.entity, my.key)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + "\n    ).as(rowParser.*)"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_delete_by_key_sql(entity, key)
  my.result = "DELETE"
  my.result = my.result + "\n      FROM $(model.dbSchema:c).$(my.entity.name)"
  my.result = my.result + "\n      WHERE $(dao_output_where_by_key(my.key))"
  return "SQL(s\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_delete_by_pk(entity, key)
  my.result = "{"
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
    my.result = my.result + "\n    $(my.entity.extendsEntity:Camel)DAO.deleteByPrimaryKey($(tx_output_key_as_value(my.entity, my.key)))"
  endif
  my.result = my.result + "\n    $(dao_output_delete_by_key_sql(my.entity, my.key)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + "\n    ).executeUpdate()"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_delete_by_key(entity, key)
  my.result = "{"
  my.result = my.result + "\n    $(dao_output_delete_by_key_sql(my.entity, my.key)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + "\n    ).executeUpdate()"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_create_or_update_sql(entity)
  my.result = "INSERT INTO $(model.dbSchema:c).$(my.entity.name)("
  my.result = my.result + "\n        $(dao_output_entity_fields(my.entity))"
  my.result = my.result + "\n      ) VALUES ("
  my.result = my.result + "\n        $(dao_output_entity_insert_placeholders(my.entity))"
  my.result = my.result + "\n      ) ON DUPLICATE KEY UPDATE"
  my.result = my.result + "\n        $(dao_output_entity_update_placeholders(my.entity))"
  return "SQL(s\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_create_or_update_method(entity)
  my.result = "{"
  my.extended = output_insert_extended(my.entity)
  if string.length(my.extended) > 0
    my.result = my.result + "\n    $(my.extended:no)"
  endif
  my.result = my.result + "\n    $(dao_output_create_or_update_sql(my.entity)).on("
  my.result = my.result + "\n      $(dao_output_entity_as_param(my.entity))"
  my.result = my.result + "\n    ).executeUpdate()"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_remove_sql(entity, field)
  return "0"
.endfunction

.function dao_output_change_sql(entity, key, field)
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  if defined(my.entity.extendsEntity) & defined(my.field.joinKey) & my.field.joinKey = my.fk.name
    my.result = "UPDATE $(model.dbSchema:c).$(my.entity.extendsEntity)"
    my.result = my.result + "\n        SET $(my.field.refField:c) = {$(my.field.name:Camel)}"
    my.result = my.result + "\n      WHERE"
    my.result = my.result + "\n        $(dao_output_where_by_extended_key(my.entity, my.key))"
  else
    my.result = "UPDATE $(model.dbSchema:c).$(my.entity.name)"
    my.result = my.result + "\n        SET $(field.name:c) = {$(field.name:Camel)}"
    my.result = my.result + "\n      WHERE"
    my.result = my.result + "\n        $(dao_output_where_by_key(my.key))"
  endif
  return "SQL(s\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_change_method(entity, key, field)
  my.result = "{"
  my.result = my.result + "\n    $(dao_output_change_sql(my.entity, my.key, my.field)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + ",\n      $(dao_output_field_as_equals_param(my.field))"
  my.result = my.result + "\n    ).executeUpdate()"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_message_sql(entity, message)
  return "0"
.endfunction

.function dao_output_add_method(entity, field)
  if my.field.type = "array"
    if defined(my.field.entity) & defined(my.field.valueField)
      # FIXME: taking shortcut!!!
      my.update_name = "update_parent_id"
      my.update_entity = my.field.entity
      if defined(my.field->query)
        my.update_entity = my.field->query.entity
      endif
      my.result = "{"
      my.result = my.result + "\n    $(my.field.name:Camel).map(x => $(my.update_entity:Camel)DAO.$(my.update_name:Camel)(Some($(dao_output_key_name_list(my.entity))), x)).sum"
      my.result = my.result + "\n  }"
      return my.result
    elsif defined(my.field.valueType)
      my.depended = model->entity(name = my.field.valueType)
      my.result = "{"
      my.result = my.result + "\n    $(my.field.name:Camel).map(x => $(my.field.valueType:Camel)DAO.createOrUpdate($(dao_out_aggregation_key_for(my.depended)), x)).sum"
      my.result = my.result + "\n  }"
      return my.result
    else
    endif
  elsif my.field.type = "map"
    my.depended = model->entity(name = my.field.entity)
    my.result = "{"
    my.result = my.result + "\n    $(my.field.name:Camel).map(x => $(my.field.entity:Pascal)Vo($(dao_out_aggregation_key_for(my.depended)), x._1, x._2))"
    my.result = my.result + "\n      .map(x => $(my.field.entity:Camel)DAO.createOrUpdate($(dao_out_aggregation_key_for(my.depended)), x)).sum"
    my.result = my.result + "\n  }"
    return my.result
  else
  endif
  return "???"
.endfunction


.function dao_output_key_name_list(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      my.result = my.result + "$(field.name:Camel)"
    endfor
  endif
  return my.result
.endfunction

.function dao_output_entity_key_name_list(entity, entity_name)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      my.pk_field = field
      if defined(my.entity->field(name = my.pk_field.name))
        if string.length(my.result) > 0
          my.result = my.result + ", "
        endif
        my.result = my.result + "$(my.entity_name:Camel).$(field.name:Camel)"
      endif
    endfor
  endif
  return my.result
.endfunction

.function dao_out_aggregation_key_def_for(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  for my.pk.field
    my.key_field = field
    if !defined(my.entity->field(name = my.key_field.name))
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      my.fk_field = extract_fk_field(my.entity, field.name)
      assign_field_type(field, my.fk_field)
      my.result = my.result + "$(field.name:Camel): $(scala_output_type(field))"
    endif
  endfor
  if string.length(my.result) > 0
    my.result = my.result + ", "
  endif
  return my.result
.endfunction

.function dao_out_aggregation_key_for(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  for my.pk.field
    my.key_field = field
    if !defined(my.entity->field(name = my.key_field.name))
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      my.fk_field = extract_fk_field(my.entity, field.name)
      assign_field_type(field, my.fk_field)
      my.result = my.result + "$(field.name:Camel)"
    endif
  endfor
  return my.result
.endfunction

.function dao_output_remove_method(entity, field)
  if my.field.type = "array"
    if defined(my.field.entity) & defined(my.field.valueField)
      # FIXME: taking shortcut!!!
      my.update_name = "update_parent_id"
      my.update_entity = my.field.entity
      if defined(my.field->query)
        my.update_entity = my.field->query.entity
      endif
      my.result = "{"
      my.result = my.result + "\n    $(my.field.name:Camel).map(x => $(my.update_entity:Camel)DAO.$(my.update_name:Camel)(None, x)).sum"
      my.result = my.result + "\n  }"
      return my.result
    elsif defined(my.field.valueType)
      my.depended = model->entity(name = my.field.valueType)
      my.entity_name = "x"
      my.result = "{"
      my.result = my.result + "\n    $(my.field.name:Camel).map($(my.entity_name) => $(my.field.valueType:Camel)DAO.deleteByPrimaryKey($(dao_out_aggregation_key_for(my.depended)), $(dao_output_entity_key_name_list(my.depended, my.entity_name)))).sum"
      my.result = my.result + "\n  }"
      return my.result
    else
    endif
  elsif my.field.type = "map"
    my.depended = model->entity(name = my.field.entity)
    my.result = "{"
    my.result = my.result + "\n    $(my.field.name:Camel).map(x => $(my.field.entity:Camel)DAO.deleteByPrimaryKey($(dao_out_aggregation_key_for(my.depended)), x._1)).sum"
    my.result = my.result + "\n  }"
    return my.result
  else
  endif
  return "???"
.endfunction

.function dao_output_message_method(entity, message)
  return "0"
.endfunction

.function output_defined_query_param_def(entity, query)
  my.result = ""
  for my.query.criteria
    if string.length(my.result) > 0
      my.result = my.result + ", "
    endif
    my.theField = get_field(my.entity.name, criteria.field)
    if defined(my.theField.joinKey)
      my.foreignKey =  my.entity->foreignKey(name = my.theField.joinKey)
      my.theRefField = model->entity(name = my.foreignKey.refEntity)->field(name = my.theField.refField)
      assign_field_type(my.theField, my.theRefField)
    endif
    my.result = my.result + "$(my.theField.name:Camel): $(scala_output_type(my.theField))"
  endfor
  return my.result
.endfunction

.function output_defined_query_param(entity, query)
  my.result = ""
  for my.query.criteria
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    endif
    my.theField = get_field(my.entity.name, criteria.field)
    if defined(my.theField.joinKey)
      my.foreignKey =  my.entity->foreignKey(name = my.theField.joinKey)
      my.theRefField = model->entity(name = my.foreignKey.refEntity)->field(name = my.theField.refField)
      assign_field_type(my.theField, my.theRefField)
    endif
    if criteria.relation = "="
      my.result = my.result + "$(dao_output_field_as_equals_param(my.theField))"
    else
      my.result = my.result + "<UNDEFINED>"
    endif
  endfor
  return my.result
.endfunction

.function output_defined_query_result_type(entity, query)
  if my.query.multiplication = "*"
    return "List[$(dao_get_type(my.query.resultType))]"
  elsif my.query.multiplication = "single"
    return "$(dao_get_type(my.query.resultType))"
  endif
.endfunction

.function output_defined_query_sql(entity, query)
  my.result = ""
  for my.query.select
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    else
      my.result = "SELECT\n"
    endif
    my.result = my.result + "        $(field)"
  endfor
  my.result = my.result + "\n      FROM $(model.dbSchema:c).$(my.entity.name)"
  my.result = my.result + "\n      WHERE"
  my.clause = ""
  for my.query.criteria
    if string.length(my.clause) > 0
      my.clause = my.clause + "\n      $(criteria.name:UPPER)"
    else
      my.clause = my.clause + "\n       "
    endif
    my.clause = my.clause + " $(criteria.field:c) $(criteria.relation) {$(criteria.field:Camel)}"
  endfor
  my.result = my.result + my.clause
  return "SQL(s\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_get_select_field_field(entity, query)
  for my.query.select
    return get_field(my.entity.name, select.field)
  endfor
.endfunction

.function dao_put_parser(entity, query)
  my.field = dao_get_select_field_field(my.entity, my.query)
  if is_element_type(my.query.resultType)
    if my.field.type = "text"
      return "SqlParser.str(\"$(my.field.name)\")"
    elsif my.field.type = "string"
      return "SqlParser.str(\"$(my.field.name)\")"
    elsif my.field.type = "double"
      return "SqlParser.str(\"$(my.field.name)\")"
    elsif my.field.type = "int"
      return "SqlParser.str(\"$(my.field.name)\")"
    elsif my.field.type = "long"
      return "SqlParser.str(\"$(my.field.name)\")"
    elsif my.field.type = "bool"
      return "SqlParser.str(\"$(my.field.name)\")"
    elsif my.field.type = "timestamp"
      return "SqlParser.str(\"$(my.field.name)\")"
    endif
  endif
  return ""
.endfunction

.function output_defined_query(entity, query)
  my.result = "{"
  my.result = my.result + "\n    $(output_defined_query_sql(my.entity, my.query)).on("
  my.result = my.result + "\n      $(output_defined_query_param(my.entity, my.query))"
  if my.query.multiplication = "*"
    my.result = my.result + "\n    ).as($(dao_put_parser(my.entity, my.query)).*)"
  elsif my.query.multiplication = "single"
    my.result = my.result + "\n    ).as($(dao_put_parser(my.entity, my.query)).single)"
  endif
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function output_parse_type(type, value)
  if is_element_type(my.type)
    if my.type = "text"
      return "\"$(my.value)\""
    elsif my.type = "string"
      return "\"$(my.value)\""
    elsif my.type = "double"
      return "\"$(my.value)\".toDouble"
    elsif my.type = "int"
      return "\"$(my.value)\".toInt"
    elsif my.type = "long"
      return "\"$(my.value)\".toLong"
    elsif my.type = "bool"
      return "\"$(my.value)\".toBoolean"
    elsif my.type = "timestamp"
      return "parseTimestamp(\"$(my.value)\")"
    endif
  elsif is_enum_type(my.type)
    return "$(my.type:Pascal).fromName(\"$(my.value:UPPER)\").get"
  else
    return "$(my.type:Pascal)Vo($(my.value))"
  endif
.endfunction

.function output_call_defined_query_param(entity, query, ref_entity, ref_query)
  my.result = ""
  for my.query.param
    if string.length(my.result) > 0
      my.result = my.result + ", "
    endif
    my.field = get_field(my.ref_entity.name, param.name)
    if defined(param.field)
      if defined(my.field.required) & my.field.required = "true"
        my.result = my.result + "$(param.field:Camel)"
      else
        my.result = my.result + "Some($(param.field:Camel))"
      endif
    elsif defined(param.type)
      if defined(my.field.required) & my.field.required = "true"
        my.result = my.result + "$(output_parse_type(param.type, param.value))"
      else
        my.result = my.result + "Some($(output_parse_type(param.type, param.value)))"
      endif
    else
    endif
  endfor
  return my.result
.endfunction

.function output_call_defined_query(entity, query, ref_entity, ref_query)
  return "$(my.ref_entity.name:Camel)DAO.$(my.ref_query.name:Camel)($(output_call_defined_query_param(my.entity, my.query, my.ref_entity, my.ref_query)))"
.endfunction

.function dao_find_query(entity, queryName)
  for my.entity.field
    for field.query
     if query.name = my.queryName
       return query
     endif
    endfor
  endfor
  for my.entity.query
    if query.name = my.queryName
      return query
    endif
  endfor
  return ""
.endfunction

.function dao_find_update(entity, updateName)
  for my.entity.field
    for field.update
     if update.name = my.updateName
       return update
     endif
    endfor
  endfor
  for my.entity.update
    if update.name = my.updateName
      return update
    endif
  endfor
  return ""
.endfunction

.function output_defined_update_param_def(entity, update)
  my.result = ""
  for my.update.set
    if string.length(my.result) > 0
      my.result = my.result + ", "
    endif
    my.theField = get_field(my.entity.name, set.field)
    if defined(my.theField.joinKey)
      my.foreignKey =  my.entity->foreignKey(name = my.theField.joinKey)
      my.theRefField = model->entity(name = my.foreignKey.refEntity)->field(name = my.theField.refField)
      assign_field_type(my.theField, my.theRefField)
    endif
    my.result = my.result + "$(my.theField.name:Camel): $(scala_output_type(my.theField))"
  endfor
  if string.length(my.result) > 0
    my.result = my.result + ", "
  endif
  my.result = my.result + "$(output_defined_query_param_def(my.entity, my.update))"
  return my.result
.endfunction

.function output_defined_update_param(entity, update)
  my.result = ""
  for my.update.set
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    endif
    my.theField = get_field(my.entity.name, set.field)
    if defined(my.theField.joinKey)
      my.foreignKey =  my.entity->foreignKey(name = my.theField.joinKey)
      my.theRefField = model->entity(name = my.foreignKey.refEntity)->field(name = my.theField.refField)
      assign_field_type(my.theField, my.theRefField)
    endif
    my.result = my.result + "$(dao_output_field_as_equals_param(my.theField))"
  endfor
  if string.length(my.result) > 0
    my.result = my.result + ",\n "
  endif
  my.result = my.result + "       $(output_defined_query_param(my.entity, my.update))"
  return my.result
.endfunction

.function output_defined_update_sql(entity, update)
  my.result = ""
  if string.length(my.result) > 0
    my.result = my.result + ", "
  else
    my.result = "UPDATE $(model.dbSchema:no).$(my.entity.name:no)\n"
    my.result = my.result + "      SET\n"
  endif
  my.sets = ""
  for my.update.set
    if string.length(my.sets) > 0
      my.sets = my.sets + ",\n"
    endif
    my.sets = my.sets + "        $(field:no) = {$(field:Camel)}"
  endfor #my.update.set
  my.clause = ""
  for my.update.criteria
    if string.length(my.clause) > 0
      my.clause = my.clause + ",\n      $(criteria.name:UPPER)"
    else
      my.clause = my.clause + "      WHERE\n"
    endif
    my.clause = my.clause + "        $(criteria.field:c) $(criteria.relation) {$(criteria.field:Camel)}"
  endfor
  my.result = my.result + "$(my.sets:no)\n"
  my.result = my.result + my.clause
  return "SQL(s\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function output_defined_update(entity, update)
  my.result = "{\n"
  my.result = my.result + "    $(output_defined_update_sql(my.entity, my.update))"
  my.result = my.result + ".on(\n"
  my.result = my.result + "        $(output_defined_update_param(my.entity, my.update))\n"
  my.result = my.result + "    ).executeUpdate()\n"
  my.result = my.result + "  }"
  return my.result
.endfunction

.function dao_output_construct_extended_pattern(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.fk = my.entity->foreignKey(refEntity = my.entity.extendsEntity)
    my.extended = find_entity_by_type(my.entity.extendsEntity)
  endif
  for my.extended.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    else
      my.result = my.result + "\n      "
    endif
    if exists_reference(my.entity, my.fk.name, field.name)
      my.extendedField = find_reference(my.entity, my.fk.name, field.name)
      my.result = my.result + "$(field.name:Camel) = $(my.entity.name:Camel).$(my.extendedField.name:Camel)"
    else
      my.result = my.result + "$(field.name:Camel) = $(my.entity.name:Camel).$(field.name:Camel)"
    endif
  endfor #my.insert.param
  return my.result
.endfunction

.function output_insert_extended(entity)
  my.result = ""
  if defined(my.entity.extendsEntity)
    my.result = my.result + "$(my.entity.extendsEntity:Camel)DAO.createOrUpdate($(my.entity.extendsEntity:Pascal)Vo("
    my.result = my.result + "$(dao_output_construct_extended_pattern(my.entity))"
    my.result = my.result + "))\n"
  endif
  return my.result
.endfunction

.function dao_get_parser(fieldName, typeName)
  if my.typeName = "bool"
    return "case \"$(my.fieldName:Camel)\" => paramName -> BooleanParser.parse(paramValue)"
  elsif my.typeName = "int" | my.typeName = "long" | my.typeName = "double"
    return "case \"$(my.fieldName:Camel)\" => paramName -> $(my.typeName:Pascal)Parser.parse(paramValue)"
  elsif my.typeName = "string"
    return "case \"$(my.fieldName:Camel)\" => paramName -> paramValue"
  elsif my.typeName = "text"
    return "case \"$(my.fieldName:Camel)\" => paramName -> paramValue"
  elsif my.typeName = "timestamp"
    return "case \"$(my.fieldName:Camel)\" => paramName -> DateParser.parse(paramValue)"
  elsif my.typeName = "array"
    return ""
  elsif my.typeName = "map"
    return ""
  elsif my.typeName = "any" | my.typeName = "actor_ref"
    return ""
  else
    ref = find_entity_by_type(my.typeName)
    if defined(ref.enum) & ref.enum = "true"
      return "case \"$(my.fieldName:Camel)\" => paramName -> EnumParser($(my.typeName:Pascal)).parse(paramValue).value"
    else
      return ""
    endif
  endif
.endfunction

.function dao_output_param_parsers(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      my.fieldName = field.name
      my.field = ""
      if defined(my.entity->field(name = my.fieldName))
        my.field = my.entity->field(name = my.fieldName)
      else
        my.field = extract_fk_field(my.entity, my.fieldName)
      endif
      my.parser = dao_get_parser(field.name, field.type)
      if string.length(my.result) > 0 & string.length(my.parser) > 0
        my.result = my.result + "\n      "
      endif
      my.result = my.result + my.parser
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      my.parser = dao_get_parser(field.name, field.type)
      if string.length(my.result) > 0 & string.length(my.parser) > 0
        my.result = my.result + "\n      "
      endif
      my.result = my.result + my.parser
    endif
  endfor
  return my.result
.endfunction

.function dao_output_param_parser(entity)
  my.result = "fieldName match {\n"
  my.result = my.result + "      $(dao_output_param_parsers(my.entity))\n"
  my.result = my.result + "    }"
  return my.result
.endfunction