.function dao_output_depended_dao_defs(entity, first)
  my.result = ""
  for my.entity.field
    if !(field.type = my.entity.name) \
      & !(defined(field.entity) & field.entity = my.entity.name) \
      & !(field.type = "any") \
      & !(defined(field.valueType) & field.valueType = my.entity.name) \
      & !(defined(field.valueType) & field.valueType = "any") \
      & !is_element_type(field.type) \
      & !(defined(field.transient) & field.transient = "true")
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      if type = "array"
        if defined(field.entity) & defined(field.valueField)
          my.result = my.result + "$(field.entity:Camel)DAO: $(field.entity:Pascal)DAO"
        else
          my.result = my.result + "$(field.valueType:Camel)DAO: $(field.valueType:Pascal)DAO"
        endif
      elsif type = "map"
        my.result = my.result + "$(field.entity:Camel)DAO: $(field.entity:Pascal)DAO"
      else
        my.result = my.result + "$(field.type:Camel)DAO: $(field.type:Pascal)DAO"
      endif
    endif
  endfor
  if my.first
    return my.result
  elsif string.length(my.result) > 0
    return ", "+ my.result
  else
    return my.result
  endif
.endfunction

.function dao_output_depended_daos(entity, first)
  my.result = ""
  for my.entity.field
    if !(field.type = my.entity.name) \
      & !(defined(field.entity) & field.entity = my.entity.name) \
      & !(field.type = "any") \
      & !(defined(field.valueType) & field.valueType = my.entity.name) \
      & !(defined(field.valueType) & field.valueType = "any") \
      & !is_element_type(field.type) \
      & !(defined(field.transient) & field.transient = "true")
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      if type = "array"
        if defined(field.entity) & defined(field.valueField)
          my.result = my.result + "$(field.entity:Camel)DAO"
        else
          my.result = my.result + "$(field.valueType:Camel)DAO"
        endif
      elsif type = "map"
        my.result = my.result + "$(field.entity:Camel)DAO"
      else
        my.result = my.result + "$(field.type:Camel)DAO"
      endif
    endif
  endfor
  if my.first
    return my.result
  elsif string.length(my.result) > 0
    return ", "+ my.result
  else
    return my.result
  endif
.endfunction

.function dao_output_result_parser(entity)
  my.result = "{\n"
  my.result = my.result + "    $(dao_output_parser_gets(my.entity))"
  my.result = my.result + " map {\n"
  my.result = my.result + "      case $(dao_output_parser_case_pattern(my.entity)) =>\n"
  my.result = my.result + "        $(my.entity.name:Pascal)Vo($(dao_output_parser_construct_pattern(my.entity)))\n"
  my.result = my.result + "    }\n  }"
  return my.result
.endfunction

.function dao_output_parser_gets(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      my.fieldName = field.name
      my.field = ""
      if defined(my.entity->field(name = my.fieldName))
        my.field = my.entity->field(name = my.fieldName)
      else
        my.field = extract_fk_field(my.entity, my.fieldName)
      endif
      if string.length(my.result) > 0
        my.result = my.result + " ~\n    "
      endif
      my.result = my.result + "get[$(scala_get_type(my.field.type))](\"$(field.name:c)\")"
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + " ~\n    "
      endif
      if is_element_type(field.type)
        my.result = my.result + "get[$(scala_get_type(field.type))](\"$(field.name:c)\")"
      else
        my.result = my.result + "get[Int](\"$(field.name:c)\")"
      endif
    endif
  endfor
  return my.result
.endfunction

.function dao_output_parser_case_pattern(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      if string.length(my.result) > 0
        my.result = my.result + " ~ "
      endif
      my.result = my.result + "$(field.name:Camel)"
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (!defined(field.transient) | !(transient = "true"))
      if is_element_type(field.type) | is_enum_type(field.type)
        if string.length(my.result) > 0
          my.result = my.result + " ~ "
        endif
        my.result = my.result + "$(field.name:Camel)"
      else
      endif
    endif
  endfor
  return my.result
.endfunction


.function dao_output_parser_construct_pattern(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    for my.pk.field
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      my.result = my.result + "$(field.name:Camel)"
    endfor
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (!defined(field.transient) | !(transient = "true"))
      if string.length(my.result) > 0
        my.result = my.result + ", "
      endif
      if is_element_type(field.type)
        if defined(field.required) & required = "true"
          my.result = my.result + "$(field.name:Camel)"
        else
          my.result = my.result + "Some($(field.name:Camel))"
        endif
      elsif is_enum_type(field.type)
        if defined(field.required) & required = "true"
          my.result = my.result + "$(field.type:Pascal).fromValue($(field.name:Camel))"
        else
          my.result = my.result + "Some($(field.type:Pascal).fromValue($(field.name:Camel)))"
        endif
      elsif field.type = "array"
        if defined(field.entity) & defined(field.valueField)
          my.result = my.result + "$(field.entity:Camel)DAO.select$(field.valueField:Pascal)sBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
        else
          my.result = my.result + "$(field.valueType:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
        endif
      elsif field.type = "map"
        my.result = my.result + "$(field.entity:Camel)DAO.select$(field.name:Pascal)By$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
      else
        my.result = my.result + "$(field.type:Camel)DAO.selectBy$(dao_output_key_as_var_name(extract_pk(my.entity)))($(scala_output_key_name_list(my.entity)))"
      endif
    endif
  endfor
  return my.result
.endfunction

.function dao_output_key_as_var_name(key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + "_"
    endif
    my.result = my.result + field.name
  endfor
  return "$(my.result:Pascal)"
.endfunction

.function dao_output_key_as_param_def(entity, key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + ", "
    endif
    if is_pk_field(my.entity, field.name)
      if defined(extract_pk_field(my.entity, field.name))
        my.pk_field = extract_pk_field(my.entity, field.name)
      else
        my.pk_field = extract_fk_field(my.entity, field.name)
      endif
      assign_field_type(field, my.pk_field)
      my.result = my.result + "$(field.name:Camel): $(scala_output_type(field))"
    elsif is_fk_field(my.entity, field.name)
      my.fk_field = extract_fk_field(my.entity, field.name)
      assign_field_type(field, my.fk_field)
      my.result = my.result + "$(field.name:Camel): $(scala_output_type(field))"
    else
    endif
  endfor
  return my.result
.endfunction

.function dao_output_entity_as_param_def(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    my.result = my.result + dao_output_key_as_param_def(my.entity, my.pk)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + ",\n      "
      endif
      my.result = my.result + "$(field.name:Camel): $(scala_output_type(field))"
    endif
  endfor
  return my.result
.endfunction

.function find_pk_or_aggregated_pk(type)
  for model.entity
    if entity.name = my.type
      return extract_pk(entity)
    else
      for entity.aggregation
        if aggregation.name = my.type
          return extract_pk(entity)
        endif
      endfor
    endif
  endfor
.endfunction

.function dao_output_entity_columns(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  for my.pk.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n        "
    endif
    my.result = my.result + "$(field.name:c)"
  endfor
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + ",\n        "
      endif
      my.result = my.result + "$(field.name:c)"
    endif
  endfor
  return my.result
.endfunction

.function dao_output_entity_insert_placeholders(entity)
  my.result = ""
  my.pk = extract_pk(my.entity)
  for my.pk.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n        "
    endif
    my.result = my.result + "{$(field.name:Camel)}"
  endfor
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + ",\n        "
      endif
      my.result = my.result + "{$(field.name:Camel)}"
    endif
  endfor
  return my.result
.endfunction

.function dao_output_entity_update_placeholders(entity)
  my.result = ""
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + ",\n        "
      endif
      my.result = my.result + "$(field.name:c)={$(field.name:Camel)}"
    endif
  endfor
  return my.result
.endfunction

.function dao_output_where_by_key(key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + "\n        AND "
    endif
    my.result = my.result + "$(field.name:c) = {$(field.name:Camel)}"
  endfor
  return my.result
.endfunction

.function dao_output_select_by_key_sql(entity, key)
  my.result = "SELECT"
  my.result = my.result + "\n        $(dao_output_entity_columns(my.entity))"
  my.result = my.result + "\n      FROM $(model.dbSchema:c).$(my.entity.name)"
  my.result = my.result + "\n      WHERE $(dao_output_where_by_key(my.key))"
  return "SQL(\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_key_as_param(entity, key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    endif
    my.field_name = field.name
    if !defined(my.entity->field(name = my.field_name))
      my.ref_field = extract_fk_field(my.entity, my.field_name)
      assign_field_type(field, my.ref_field)
    endif
    my.result = my.result + dao_output_field_as_param(field)
  endfor
  return my.result
.endfunction

.function dao_output_field_as_param(field)
  if is_enum_type(my.field.type)
    return "\"$(my.field.name:Camel)\" -> toValue($(my.field.name:Camel))"
  elsif my.field.type = "timestamp"
    return "\"$(my.field.name:Camel)\" -> toDate($(my.field.name:Camel))"
  else
    return "\"$(my.field.name:Camel)\" -> $(my.field.name:Camel)"
  endif
.endfunction

.function dao_output_entity_key_as_param(entity, key)
  my.result = ""
  for my.key.field
    if string.length(my.result) > 0
      my.result = my.result + ",\n      "
    endif
    my.field_name = field.name
    if !defined(my.entity->field(name = my.field_name))
      my.ref_field = extract_fk_field(my.entity, my.field_name)
      assign_field_type(field, my.ref_field)
    endif
    my.result = my.result + dao_output_entity_field_as_param(my.entity, field)
  endfor
  return my.result
.endfunction

.function dao_output_entity_field_as_param(entity, field)
  if is_enum_type(my.field.type)
    return "\"$(my.field.name:Camel)\" -> toValue($(my.entity.name:Camel).$(my.field.name:Camel))"
  elsif my.field.type = "timestamp"
    return "\"$(my.field.name:Camel)\" -> toDate($(my.entity.name:Camel).$(my.field.name:Camel))"
  else
    return "\"$(my.field.name:Camel)\" -> $(my.entity.name:Camel).$(my.field.name:Camel)"
  endif
.endfunction

.function dao_output_entity_as_param(entity)
  my.result = ""
  if defined(extract_pk(my.entity))
    my.pk = extract_pk(my.entity)
    my.result = my.result + dao_output_entity_key_as_param(my.entity, my.pk)
  endif
  for my.entity.field
    if !is_pk_field(my.entity, field.name) & (is_element_type(field.type) | is_enum_type(field.type))
      if string.length(my.result) > 0
        my.result = my.result + ",\n      "
      endif
      my.result = my.result + "$(dao_output_entity_field_as_param(my.entity, field))"
    endif
  endfor
  return my.result
.endfunction

.function dao_output_select_by_key_single(entity, key)
  my.result = "database.withTransaction { implicit c =>"
  my.result = my.result + "\n    $(dao_output_select_by_key_sql(my.entity, my.key)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + "\n    ).as(parser.single)"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_select_by_key(entity, key)
  my.result = "database.withTransaction { implicit c =>"
  my.result = my.result + "\n    $(dao_output_select_by_key_sql(my.entity, my.key)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + "\n    ).as(parser.*)"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_create_or_update_sql(entity)
  my.result = "INSERT INTO $(model.dbSchema:c).$(my.entity.name)("
  my.result = my.result + "\n        $(dao_output_entity_columns(my.entity))"
  my.result = my.result + "\n      ) VALUES ("
  my.result = my.result + "\n        $(dao_output_entity_insert_placeholders(my.entity))"
  my.result = my.result + "\n      ) ON DUPLICATE KEY UPDATE"
  my.result = my.result + "\n        $(dao_output_entity_update_placeholders(my.entity))"
  return "SQL(\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_create_or_update_method(entity)
  my.result = "database.withTransaction { implicit c =>"
  my.result = my.result + "\n    $(dao_output_create_or_update_sql(my.entity)).on("
  my.result = my.result + "\n      $(dao_output_entity_as_param(my.entity))"
  my.result = my.result + "\n    ).executeUpdate()"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_add_sql(entity, field)
  if my.field.type = "array"
    if defined(my.field.entity)
    elsif defined(my.field.valueType)
    else
    endif
  elsif my.field.type = "map" & defined(my.field.valueType)
  else
  endif
  return "???"
.endfunction

.function dao_output_remove_sql(entity, field)
  return "???"
.endfunction

.function dao_output_change_sql(entity, key, field)
  my.result = "UPDATE $(model.dbSchema:c).$(my.entity.name)"
  my.result = my.result + "\n        SET $(field.name:c) = {$(field.name:Camel)}"
  my.result = my.result + "\n      WHERE"
  my.result = my.result + "\n        $(dao_output_where_by_key(my.key))"
  return "SQL(\"\"\"\n      $(my.result:no)\n    \"\"\")"
.endfunction

.function dao_output_change_method(entity, key, field)
  my.result = "database.withTransaction { implicit c =>"
  my.result = my.result + "\n    $(dao_output_change_sql(my.entity, my.key, my.field)).on("
  my.result = my.result + "\n      $(dao_output_key_as_param(my.entity, my.key))"
  my.result = my.result + ",\n      $(dao_output_field_as_param(my.field))"
  my.result = my.result + "\n    ).executeUpdate()"
  my.result = my.result + "\n  }"
  return my.result
.endfunction

.function dao_output_message_sql(entity, message)
  return "???"
.endfunction

.function dao_output_add_method(entity, field)
  return "???"
.endfunction

.function dao_output_remove_method(entity, field)
  return "???"
.endfunction

.function dao_output_message_method(entity, message)
  return "???"
.endfunction

