.template 1
.class_package = "$(model.package).dao"
.pkgdir = "dao-mysql/src/main/scala/$(string.replace(class_package, ".|/"))"
.directory.create(pkgdir)
.for entity
.if (!defined(transient) | !(transient = "true")) & !(name = "alarm_record")
.output "$(pkgdir)/$(entity.name:Pascal)DAO.scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import $(model.package).message._
import $(model.package).message.SqlWhereClause._
import $(model.package).util._
import $(model.package).util.DateFormat._
import $(model.package).util.EnumConvert._
import $(model.package).util.Parser._
import com.google.protobuf.any.Any
import com.google.protobuf.timestamp.Timestamp
import java.sql.Connection
import java.util.Date
import javax.inject._
import play._
import play.api.db._
import anorm.SqlParser._
import anorm.ParameterValue._
import anorm._

@Singleton
class $(entity.name:Pascal)DAO @Inject() ($(dao_output_depended_dao_defs(entity, 1))) {
  val sql = """$(dao_output_select_sql(entity))"""

  def parseParam(fieldName: String, paramName:String, paramValue: String): NamedParameter = $(dao_output_param_parser(entity))

  private def rowParser(implicit c: Connection): RowParser[$(entity.name:Pascal)Vo] = $(dao_output_result_parser(entity))

  private def namedParams(q: QueryCommand): Seq[NamedParameter] = {
    toNamedParams(q.predicate, q.params)
      .map(x => parseParam(x._1, x._2, x._3))
      .asInstanceOf[Seq[NamedParameter]]
  }

  def createOrUpdate($(dao_out_aggregation_key_def_for(entity))$(entity.name:Camel): $(entity.name:Pascal)Vo)(implicit c: Connection): Int \
= $(dao_output_create_or_update_method(entity))
.
.  primaryKey = extract_pk(entity)

  def deleteByPrimaryKey($(dao_output_key_as_param_def(entity, primaryKey)))(implicit c: Connection): Int \
= $(dao_output_delete_by_key(entity, primaryKey))

  def selectByPrimaryKey($(dao_output_key_as_param_def(entity, primaryKey)))(implicit c: Connection): $(entity.name:Pascal)Vo = $(dao_output_select_by_key_single(entity, primaryKey))

  def selectByQueryCriteria(q: QueryCommand)(implicit c: Connection): List[$(entity.name:Pascal)Vo] = {
    val stmt = SQL(s"""${sql}\n${toWhereClause(q.predicate, 6)}""")
    val params = namedParams(q)
    Logger.info(s"""
      ${sql}\n${toWhereClause(q.predicate, 6)}
  [params for substitution] => {}
    """,
      namedParams(q))
    if(params.isEmpty) {
      Logger.info(s"params is empty: {}", params)
      stmt.as(rowParser.*)
    } else {
      Logger.info(s"params is not empty: {}", params)
      stmt.on(
        params:_*
      ).as(rowParser.*)
    }
  }

.
.  for foreignKey

  def selectBy$(dao_output_key_as_var_name(foreignKey))($(dao_output_key_as_param_def(entity, foreignKey)))(implicit c: Connection): List[$(entity.name:Pascal)Vo] = $(dao_output_select_by_key(entity, foreignKey))
.  endfor
.
.  for query
.    if defined(query.name) & !(defined(query.refName) | defined(query.entity))

  def $(query.name:Camel)($(output_defined_query_param_def(entity, query)))(implicit c: Connection): $(output_defined_query_result_type(entity, query)) = $(output_defined_query(entity, query))
.    else
.    endif
.  endfor # query
.
.  for update
.    if defined(update.name) & !(defined(update.refName) | defined(update.entity))

  def $(update.name:Camel)($(output_defined_update_param_def(entity, update)))(implicit c: Connection): Int = $(output_defined_update(entity, update))
.    else
.    endif
.  endfor # update
.
.  for field
.    theField = field
.    if (field.type = "array" | field.type = "map") & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")

  def add$(field.name:Pascal)($(dao_output_key_as_param_def(entity, primaryKey)), $(field.name:Camel): $(scala_output_type(field)))(implicit c: Connection): Int = $(dao_output_add_method(entity, field))

  def remove$(field.name:Pascal)($(dao_output_key_as_param_def(entity, primaryKey)), $(field.name:Camel): $(scala_output_type(field)))(implicit c: Connection): Int = $(dao_output_remove_method(entity, field))
.    elsif !defined(pk->field(name = theField.name)) & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")

  def change$(field.name:Pascal)($(dao_output_key_as_param_def(entity, primaryKey)), $(field.name:Camel): $(scala_output_type(field)))(implicit c: Connection): Int = $(dao_output_change_method(entity, primaryKey, field))
.    else
.    endif
.    for field.query
.      if defined(query.name) & !(defined(query.refName) | defined(query.entity))

  def $(query.name:Camel)($(output_defined_query_param_def(entity, query)))(implicit c: Connection): $(output_defined_query_result_type(entity, query)) = $(output_defined_query(entity, query))
.      else
.      endif
.    endfor
.  endfor
.
.  for message
.    if !(defined(transient) & transient = "true")

  def $(message.name:Camel)(evt: $(message.name:Pascal)Evt)(implicit c: Connection): Int = $(dao_output_message_method(entity, field))
.    endif
.  endfor
}
.close
.endif
.endfor

.endtemplate


