.template 1
.pkgdir = "message/src/main/protobuf/$(string.replace(model.package, ".|/"))"
.directory.create(pkgdir)
.output "$(pkgdir)/messages.proto"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
syntax = "proto2";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "scalapb/scalapb.proto";
option (scalapb.options) = {
  flat_package: true
};
.message_package = "$(model.package).message"
package $(message_package);


.for entity
. extends_class = "$(message_package).ValueObject"
.  if defined(entity.extends)
.    extends_class = entity.extends
.  endif
.if defined(entity.enum) & entity.enum = "true"
enum $(entity.name:Pascal) {
  option (scalapb.enum_options).extends = "$(extends_class:no)";
.  enumConf = entity->enum(name = entity.name)
.for entity.row
  $($(enumConf.nameField):no) = $($(enumConf.valueField));
.endfor
};

.endif
message $(entity.name:Pascal)Vo {
  option (scalapb.message).extends = "$(extends_class:no)";
.fieldNo = 1
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.for field
.  theField = field
.  if (defined(field.transient) & field.transient = "true") | defined(pk->field(name = theField.name))
.  else
  $(pb_output_field(field, fieldNo))
.    fieldNo = fieldNo + 1
.  endif
.endfor
};

.aggRoot = ""
.if defined(entity.aggregationRoot) & entity.aggregationRoot = "true"
.  pk = extract_pk(entity)
.  aggRoot = entity.name
.
message Create$(entity.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.for field
.  theField = field
.  if defined(field.transient) & field.transient = "true" | defined(pk->field(name = theField.name))
.  else
  $(pb_output_field(field, fieldNo))
.    fieldNo = fieldNo + 1
.  endif
.endfor
};

message Create$(entity.name:Pascal)Evt {
  option (scalapb.message).extends = "$(message_package).Event";
  optional string userId = 1;
.fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.for field
.  theField = field
.  if defined(field.transient) & field.transient = "true" | defined(pk->field(name = theField.name))
.  else
  $(pb_output_field(field, fieldNo))
.    fieldNo = fieldNo + 1
.  endif
.endfor
};

message Update$(entity.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.for field
.  theField = field
.  if defined(field.transient) & field.transient = "true" | defined(pk->field(name = theField.name))
.  else
  $(pb_output_field(field, fieldNo))
.    fieldNo = fieldNo + 1
.  endif
.endfor
};

message Update$(entity.name:Pascal)Evt {
  option (scalapb.message).extends = "$(message_package).Event";
  optional string userId = 1;
.fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.for field
.  theField = field
.  if defined(field.transient) & field.transient = "true" | defined(pk->field(name = theField.name))
.  else
  $(pb_output_field(field, fieldNo))
.    fieldNo = fieldNo + 1
.  endif
.endfor
};

message Delete$(entity.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.  fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
};

message Delete$(entity.name:Pascal)Evt {
  option (scalapb.message).extends = "$(message_package).Event";
  optional string userId = 1;
.  fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
};

message Retrieve$(entity.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.  fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
};

.  for field
.    theField = field
.    if (field.type = "array" | field.type = "map") & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")
message Add$(field.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.      fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
  $(pb_output_field(field, fieldNo))
};

message Add$(field.name:Pascal)Evt {
  option (scalapb.message).extends = "$(message_package).Event";
  optional string userId = 1;
.      fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
  $(pb_output_field(field, fieldNo))
};

message Remove$(field.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.      fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
  $(pb_output_field(field, fieldNo))
};

message Remove$(field.name:Pascal)Evt {
  option (scalapb.message).extends = "$(message_package).Event";
  optional string userId = 1;
.      fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
  $(pb_output_field(field, fieldNo))
};

.     elsif !defined(pk->field(name = theField.name))  & (defined(field.aggregation) & field.aggregation = "true")
message Get$(field.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
};

.if (defined(field.transient) & field.transient="true")
message Update$(field.name:Pascal)Cmd {
.else
message Change$(field.name:Pascal)Cmd {
.endif
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.      fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
  $(pb_output_field(field, fieldNo))
};

.if !(defined(field.transient) & field.transient="true")
message Change$(field.name:Pascal)Evt {
  option (scalapb.message).extends = "$(message_package).Event";
  optional string userId = 1;
.      fieldNo = 2
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
  $(pb_output_field(field, fieldNo))
};

.endif
.
.    else
.    endif    
.  endfor
.elsif defined(entity.aggregationTo)
.  aggRoot = "$(entity.aggregationTo)"
.else
.  ###abort "E: no aggregationRoot or aggregationTo is defined on entity $(entity.name)."
.endif
.
.for aggregation
message Update$(aggregation.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.fieldNo = 2
.if defined(entity.aggregationRoot)
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.endif
.for field
.  theField = field
.  if defined(field.type)
  $(pb_output_field(field, fieldNo))
.  else
.    af = entity->field(name = theField.name)
  $(pb_output_field(af, fieldNo))
.  endif
. fieldNo = fieldNo + 1
.endfor  
};

message $(aggregation.name:Pascal)Vo{
  option (scalapb.message).extends = "$(message_package).ValueObject";
.fieldNo = 1
.if defined(entity.aggregationRoot)
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.endif
.for field
.  theField = field
.  if defined(field.type)
  $(pb_output_field(field, fieldNo))
.  else
.    af = entity->field(name = theField.name)
  $(pb_output_field(af, fieldNo))
.  endif
. fieldNo = fieldNo + 1
.endfor
};

message Get$(aggregation.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(message_package).$(aggRoot:Pascal)Command";
  optional string userId = 1;
.fieldNo = 2
.if defined(entity.aggregationRoot)
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.endif
};

.endfor
.
.for message
. extends_class = "$(message_package).$(aggRoot:Pascal)"
.  if defined(message.extends)
.    extends_class = message.extends
.  endif
message $(message.name:Pascal)Cmd {
  option (scalapb.message).extends = "$(extends_class:no)Command";
  optional string userId = 1;
.fieldNo = 2
.if defined(entity.aggregationRoot)
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.endif
.for field
.  theField = field
.  if defined(field.type)
  $(pb_output_field(field, fieldNo))
.  else
.    af = entity->field(name = theField.name)
  $(pb_output_field(af, fieldNo))
.  endif
. fieldNo = fieldNo + 1
.endfor
};

.if !(defined(transient) & transient = "true")
message $(message.name:Pascal)Evt {
  option (scalapb.message).extends = "$(extends_class:no)Event";
  optional string userId = 1;
.fieldNo = 2
.if defined(entity.aggregationRoot)
.  keys = pb_output_pk(entity, fieldNo)
.  if string.length(keys) > 0
  $(keys:no)
.  endif
.endif
.for field
.  theField = field
.  if defined(field.type)
  $(pb_output_field(field, fieldNo))
.  else
.    af = entity->field(name = theField.name)
  $(pb_output_field(af, fieldNo))
.  endif
. fieldNo = fieldNo + 1
.endfor
};

.endif
.endfor
.endfor

.close
.endtemplate


