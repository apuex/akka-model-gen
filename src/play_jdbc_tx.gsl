.template 1
.class_package = "$(model.package).tx"
.pkgdir = "dao-mysql/src/main/scala/$(string.replace(class_package, ".|/"))"
.directory.create(pkgdir)
.for entity
.if !(defined(entity.generate) & entity.generate = "false")
.output "$(pkgdir)/$(entity.name:Pascal)Tx.scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import $(model.package).message._
import com.google.protobuf.timestamp.Timestamp

trait $(entity.name:Pascal)Tx {

  def createOrUpdate($(dao_out_aggregation_key_def_for(entity))$(entity.name:Camel): $(entity.name:Pascal)Vo): Int = ???
.
.  primaryKey = extract_pk(entity)

  def deleteByPrimaryKey($(dao_output_key_as_param_def(entity, primaryKey))): Int = ???

  def selectByPrimaryKey($(dao_output_key_as_param_def(entity, primaryKey))): $(entity.name:Pascal)Vo = ???

  def selectByQueryCriteria(q: QueryCommand): List[$(entity.name:Pascal)Vo] = ???
.
.  for foreignKey

  def selectBy$(dao_output_key_as_var_name(foreignKey))($(dao_output_key_as_param_def(entity, foreignKey))): List[$(entity.name:Pascal)Vo] = ???
.  endfor
.
.  for field
.    theField = field
.    if (field.type = "array" | field.type = "map") & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")

  def add$(field.name:Pascal)($(dao_output_key_as_param_def(entity, primaryKey)), $(field.name:Camel): $(scala_output_type(field))): Int = ???

  def remove$(field.name:Pascal)($(dao_output_key_as_param_def(entity, primaryKey)), $(field.name:Camel): $(scala_output_type(field))): Int = ???

.    elsif !defined(pk->field(name = theField.name)) & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")

  def change$(field.name:Pascal)($(dao_output_key_as_param_def(entity, primaryKey)), $(field.name:Camel): $(scala_output_type(field))): Int = ???
.    else
.    endif
.    for field.query
.      if defined(query.name) & !(defined(query.refName) | defined(query.entity))

  def $(query.name:Camel)($(output_defined_query_param_def(entity, query))): $(output_defined_query_result_type(entity, query)) = ???
.      else
.      endif
.    endfor
.  endfor
.
.  for message
.    if !(defined(transient) & transient = "true")

  def $(message.name:Camel)(evt: $(message.name:Pascal)Evt): Int = ???
.    endif
.  endfor
}
.close
.endif
.endfor
.output "$(pkgdir)/Module.scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import com.google.inject._

class Module extends AbstractModule {
  override def configure() = {
.for entity
.if (!defined(transient) | !(transient = "true"))
    bind(classOf[$(entity.name:Pascal)Tx]).to(classOf[$(entity.name:Pascal)TxImpl])
.endif
.endfor
  }
}
.endtemplate


