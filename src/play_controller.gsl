.template 1
.class_package = "$(model.package).controller"
.pkgdir = "rest/app/$(string.replace(class_package, ".|/"))"
.directory.create(pkgdir)
.for entity
.if !(defined(entity.enum) & entity.enum = "true") & !defined(entity.aggregationTo) & !(defined(entity.transient) & entity.transient = "true") & !(defined(entity.generate) & entity.generate = "false")
.output "$(pkgdir)/$(entity.name:Pascal)Controller.scala"
/*****************************************************
 ** This file is 100% ***GENERATED***, DO NOT EDIT! **
 *****************************************************/
package $(class_package)

import javax.inject._

import akka.actor._
import akka.pattern._
import akka.util._
import $(model.package).json._
import $(model.package).message.ResponseType._
import $(model.package).message._
import play.api.libs.json._
import play.api.mvc._

import scala.concurrent._
import scala.concurrent.duration._

@Singleton
class $(entity.name:Pascal)Controller @Inject()(cc: ControllerComponents, @Named("$(entity.name:Pascal)Service") $(entity.name:Camel): ActorRef)(implicit ec: ExecutionContext)
  extends AbstractController(cc)
    with $(entity.name:Pascal)JsonSupport {
  implicit val timeout: Timeout = FiniteDuration(20, SECONDS)

  def create = Action.async(parse.json) { request =>
    val result = request.body.validate[Create$(entity.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Created(Json.toJson(r))
          case ResponseVo(ALREADY_EXISTS, _) => NotModified
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }

  def retrieve = Action.async(parse.json) { request =>
    val result = request.body.validate[Retrieve$(entity.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r: $(entity.name:Pascal)Vo => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }

  def update = Action.async(parse.json) { request =>
    val result = request.body.validate[Update$(entity.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }

  def query = Action.async(parse.json) { request =>
    val result = request.body.validate[QueryCommand]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case $(entity.name:Pascal)ListVo(list) => Ok(Json.toJson(list))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }

  def delete = Action.async(parse.json) { request =>
    val result = request.body.validate[Delete$(entity.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }
.  for field
.    theField = field
.    if (field.type = "array" | field.type = "map") & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")
  def add$(field.name:Pascal) = Action.async(parse.json) { request =>
    val result = request.body.validate[Add$(field.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }

  def remove$(field.name:Pascal) = Action.async(parse.json) { request =>
    val result = request.body.validate[Remove$(field.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }
.    elsif !defined(pk->field(name = theField.name)) & !(defined(field.transient) & field.transient="true") & (defined(field.aggregation) & field.aggregation = "true")

  def change$(field.name:Pascal) = Action.async(parse.json) { request =>
    val result = request.body.validate[Change$(field.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }
.    else
.    endif
.  endfor
.for aggregation

  def update$(aggregation.name:Pascal) = Action.async(parse.json) { request =>
    val result = request.body.validate[Update$(aggregation.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }

  def get$(aggregation.name:Pascal) = Action.async(parse.json) { request =>
    val result = request.body.validate[get$(aggregation.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }
.endfor
.
.for message

  def $(message.name:Camel) = Action.async(parse.json) { request =>
    val result = request.body.validate[$(message.name:Pascal)Cmd]
    result.fold(
      errors => Future({
        BadRequest(Json.toJson(ResponseVo(BAD_COMMAND, Some(errors.toString()))))
      }),
      x => {
        $(entity.name:Camel).ask(x).mapTo[ValueObject].map {
.if defined(returns) & ((defined(multiply) & multiply = "1") | !defined(multiply))
          case r: $(returns:Pascal)Vo => Ok(Json.toJson(r))
.elsif defined(returns) & defined(multiply) & multiply = "*"
          case $(entity.name:Pascal)ListVo(list) => Ok(Json.toJson(list))
.else
          case r@ResponseVo(SUCCESS, _) => Ok(Json.toJson(r))
.endif
          case r@ResponseVo(NOT_EXIST, _) => NotFound(Json.toJson(r))
          case r: ResponseVo => InternalServerError(Json.toJson(r))
        }
      }
    )
  }
.endfor
}

.close
.endif # !(defined(entity.enum) & entity.enum = "true") & !defined(entity.aggregationTo) & !(defined(entity.transient) & entity.transient = "true")
.endfor
.endtemplate
